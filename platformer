from pygame import *

class GameSprite(sprite.Sprite):    
    def __init__(
            self,
            player_image,
            player_x,
            player_y,
            player_speed
        ):
        super().__init__()
       
        self.image = transform.scale(image.load(player_image), (65, 65))
        self.speed = player_speed
 
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y

    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

class Player(GameSprite):
    def update(self):
        keys = key.get_pressed()
        if keys[K_LEFT] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[K_RIGHT] and self.rect.x < win_width - 80:
            self.rect.x += self.speed
        if keys[K_UP] and self.rect.y > 5:
            self.rect.y -= self.speed
        if keys[K_DOWN] and self.rect.y < win_height - 80:
            self.rect.y += self.speed

class Target(GameSprite):
    direction = "left"

    def update(self):
        if self.rect.x <= 470:
            self.direction = "right"
        if self.rect.x >= win_width - 85:
            self.direction = "left"

        if self.direction == "left":
            self.rect.x -= self.speed
        else:
            self.rect.x += self.speed

class Wall(sprite.Sprite):
    def __init__(
        self,
        wall_x,
        wall_y,
        wall_width,
        wall_height,
        color=(200, 0, 100)
    ):
        super().__init__()
        self.color = color
        self.width = wall_width
        self.height = wall_height
        self.image = Surface((self.width, self.height))
        self.image.fill(self.color)
    
        self.rect = self.image.get_rect()
        self.rect.x = wall_x
        self.rect.y = wall_y

    def draw_wall(self):
        window.blit(self.image, (self.rect.x, self.rect.y))


win_width = 700
win_height = 500

window = display.set_mode((win_width, win_height))
display.set_caption('Labirynt')
background = transform.scale(image.load(
    "background.jpg"), (win_width, win_height))

player = Player('Ricardo.png', 5, win_height - 80, 4)
monster = Target('mario.png', win_width - 80, 280, 2)
life = 3


w1 = Wall(100, 20, 450, 10)
w2 = Wall(100, 480, 350, 10)
w3 = Wall(100, 120, 10, 360)
w4 = Wall(200, 130, 10, 350)
w5 = Wall(450, 130, 10, 360)
w6 = Wall(300, 20, 10, 350)
w7 = Wall(390, 120, 130, 10)

walls =  [w1, w2, w3, w4, w5, w6, w7]

game = True
finish = False
clock = time.Clock()
FPS = 60

font.init()
font = font.Font(None, 70)
win = font.render('YOU WIN!', True, (255, 215, 0))
lose = font.render('YOU LOSE!', True, (100, 0 , 0))
count = font.render(str(life), True, (255, 0, 80))
map = 1

mixer.init()
mixer.music.load('background.ogg')
mixer.music.play()

money = mixer.Sound('win.ogg')
death = mixer.Sound('death.ogg')

while game:
    for e in event.get():
        if e.type == QUIT:
                game = False

    if finish != True:
        window.blit(background, (0, 0))
        player.update()
        monster.update()

        player.reset()
        monster.reset()

    if map == 1:
        for wall in walls:
            wall.draw_wall()
    else:
            wl1 = Wall(100, 20, 450, 10)
            wl2 = Wall(100, 480, 350, 10)
            wl3 = Wall(100, 20, 10, 380)
            wl4 = Wall(200, 130, 10, 350)
            wl5 = Wall(450, 130, 10, 360)
            wl6 = Wall(300, 20, 10, 350)
            wl7 = Wall(390, 120, 130, 10)

    walls1 =  [w1, w2, w3, w4, w5, w6, w7]

    for wall in walls:
        if sprite.collide_rect(player, wall) and life > 0:
            life -= 1
            count = font.render(str(life), True, (255, 0, 80))
            player.rect.x = 5
            player.rect.y = win_height - 80
            
        elif sprite.collide_rect(player, wall) and life == 0:
            window.blit(lose, (200, 200))
            mixer.music.stop()
            death.play()

        window.blit(count, (20, 20))

    if sprite.collide_rect(player, monster):
        finish = True
        window.blit(win, (200,200))
    

    display.update()
    clock.tick(FPS)          
